// doctor/application/use-cases/RegisterDoctorUseCase.ts
import { Doctor } from "../../domain/entities/Doctor";
import { DoctorRepository } from "../../domain/DoctorRepository";
import { IEncryptPasswordService } from "../../../shared/domain/services/IEncryptPasswordService";

export class RegisterDoctorUseCase {
    constructor(
        readonly doctorRepository: DoctorRepository,
        readonly encryptService: IEncryptPasswordService
    ) {}

    async run(
        name: string | null, // Name can be optional now if desired
        email: string,       // <-- ADDED email parameter
        lastName: string | null, // lastName can be optional
        password: string
    ): Promise<Doctor | null> {
        try {
            // --- ADDED: Check if email already exists ---
            const existingDoctor = await this.doctorRepository.getDoctorByEmail(email);
            if (existingDoctor) {
                console.warn(`Attempt to register doctor with existing email: ${email}`);
                return null; // Indicate conflict (or throw a specific error)
            }
            // -----------------------------------------

            const encodedPassword = await this.encryptService.encodePassword(password);

            const doctorObject = new Doctor(
                '', // ID generated by DB
                name,
                email, // <-- Pass email
                lastName,
                encodedPassword
            );

            const registeredDoctor = await this.doctorRepository.registerDoctor(doctorObject);
            return registeredDoctor;

        } catch (error) {
            console.error("Error in RegisterDoctorUseCase:", error);
            return null;
        }
    }
}