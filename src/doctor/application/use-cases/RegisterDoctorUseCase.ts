// doctor/application/use-cases/RegisterDoctorUseCase.ts
import { Doctor } from "../../domain/entities/Doctor";
import { DoctorRepository } from "../../domain/DoctorRepository";
import { IEncryptPasswordService } from "../../../shared/domain/services/IEncryptPasswordService";

export class RegisterDoctorUseCase {
    constructor(
        readonly doctorRepository: DoctorRepository,
        readonly encryptService: IEncryptPasswordService
    ) {}

    async run(
        name: string,
        lastName: string,
        password: string
    ): Promise<Doctor | null> {
        try {
            // Note: No explicit check for existing doctor by name/lastName here,
            // as it might not be a unique constraint in the DB.
            // Relying on repository/DB insert behavior.

            const encodedPassword = await this.encryptService.encodePassword(password);

            // ID will be generated by DB
            const doctorObject = new Doctor(
                '',
                name,
                lastName,
                encodedPassword
                // created_at is handled by DB default
            );

            const registeredDoctor = await this.doctorRepository.registerDoctor(doctorObject);
            return registeredDoctor;

        } catch (error) {
            console.error("Error in RegisterDoctorUseCase:", error);
            // Consider logging specific DB errors if possible
            return null;
        }
    }
}