// patient/application/use-cases/RegisterPatientUseCase.ts
import { Patient } from "../../domain/entities/Patient";
import { PatientRepository } from "../../domain/PatientRepository";
import { IEncryptPasswordService } from "../../../shared/domain/services/IEncryptPasswordService";

export class RegisterPatientUseCase {
    constructor(
        readonly patientRepository: PatientRepository,
        readonly encryptService: IEncryptPasswordService
    ) {}

    async run(
        email: string,
        password: string,
        name: string | null,
        last_name: string | null,
        age: number | null,
        height: number | null,
        weight: number | null
    ): Promise<Patient | null> {
        try {
            // Check if patient already exists (optional, repository could handle unique constraint)
            const existingPatient = await this.patientRepository.getPatientByEmail(email);
            if (existingPatient) {
                // Maybe throw a specific error or return null indicating conflict
                console.error("Patient with this email already exists.");
                return null;
            }

            const encodedPassword = await this.encryptService.encodePassword(password);

            // Create a Patient object, ID will be assigned by DB/Repository
            // Pass null or '' for ID initially, repo handles it
            const patientObject = new Patient(
                '', // ID will be generated by DB
                email,
                encodedPassword,
                name,
                last_name,
                age,
                height,
                weight
            );


            const patient = await this.patientRepository.registerPatient(patientObject);
            return patient;
        } catch (error) {
            // Log the error for debugging purposes
            console.error("Error in RegisterPatientUseCase:", error);
            return null;
        }
    }
}